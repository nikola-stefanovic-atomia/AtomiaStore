@model Atomia.Store.AspNetMvc.Models.DefaultAccountViewModel
@using System.Collections
@using System.Globalization
@using System.Resources
@using Atomia.Store.AspNetMvc.Models;
@using Atomia.Web.Plugin.Validation.HtmlHelpers;

@{
    Html.EnableClientValidation();
    Html.AddCustomerValidationRules(new CustomerValidationOptions()
    {
        SubForms = new List<Form>()
            {
                new Form(formName: "MainContact", countryFormName:"MainContact"),
                new Form(formName: "MainContact.IndividualInfo", countryFormName:"MainContact"),
                new Form(formName: "MainContact.CompanyInfo", countryFormName:"MainContact"),
                new Form(formName: "MainContact.CustomFieldsInfo", countryFormName:"MainContact"),
                new Form(formName: "BillingContact", countryFormName:"BillingContact"),
                new Form(formName: "BillingContact.IndividualInfo", countryFormName:"BillingContact"),
                new Form(formName: "BillingContact.CompanyInfo", countryFormName:"BillingContact"),
                new Form(formName: "WhoisContact", countryFormName:"WhoisContact"),
                new Form(formName: "WhoisContact.IndividualInfo", countryFormName:"WhoisContact"),
                new Form(formName: "WhoisContact.CompanyInfo", countryFormName:"WhoisContact")
            },
        ProductsChangedEvent = "Atomia.VM.cart.ValidationUpdateEvent",
        ArticleNumberList = "Atomia.VM.cart.articleNumbers()",
        ProductCategoryList = "Atomia.VM.cart.categories()"
    });

    System.Web.Script.Serialization.JavaScriptSerializer jsSerializer = new System.Web.Script.Serialization.JavaScriptSerializer();

    var fields = "{";

    ResourceManager CustomFields = new ResourceManager("Resources.CustomFields", System.Reflection.Assembly.Load("App_GlobalResources"));

    ResourceSet resourceSet = CustomFields.GetResourceSet(CultureInfo.CurrentUICulture, true, true);
    foreach (DictionaryEntry entry in resourceSet)
    {
        fields += jsSerializer.Serialize(entry.Key) + ":" + jsSerializer.Serialize(entry.Value) + ",";
    }

    fields = fields.TrimEnd(',') + "}";

    var dnsItem = (string) ViewBag.AddDnsPackage;
    var selectedOrderAccounType = (CustomerOrderAccounType) ViewBag.SelectedOrderAccounType;
}

<script type="text/javascript">

    Atomia.VM.customerOrderAccountSelector = new Atomia.ViewModels.CustomerOrderAccountSelectorModel({
        allowExistingCustomerOrders: @Model.OrderAccountTypeSelector.AllowExistingCustomerOrders.ToString().ToLower(),
        existingAccountType: '@Model.OrderAccountTypeSelector.ExistingAccountType',
        newAccountType: '@Model.OrderAccountTypeSelector.NewAccountType',
        selectedOrderAccounType: '@Html.Raw(selectedOrderAccounType)'
    });

    Atomia.VM.account = Atomia.Utils.mix(Atomia.ViewModels.AccountModel, Atomia.ViewModels.WhoisModel);
    Atomia.VM.account.otherBillingContact(@Model.OtherBillingContact.ToString().ToLower());
    Atomia.VM.account.otherWhoisContact(@Model.OtherWhoisContact.ToString().ToLower());
    @{
        var initialMainContactCustomerType = string.IsNullOrEmpty(Model.MainContact.CustomerType) ? "individual" : Model.MainContact.CustomerType;
        var initialBillingCustomerType = string.IsNullOrEmpty(Model.BillingContact.CustomerType) ? "individual" : Model.BillingContact.CustomerType;
        var initialWhoisCustomerType = string.IsNullOrEmpty(Model.WhoisContact.CustomerType) ? "individual" : Model.WhoisContact.CustomerType;
    }
    Atomia.VM.account.mainContactCustomerType('@initialMainContactCustomerType');
    Atomia.VM.account.billingContactCustomerType('@initialBillingCustomerType');
    Atomia.VM.account.whoisContactCustomerType('@initialWhoisCustomerType');

    Atomia.VM.existingCustomer = new Atomia.ViewModels.ExistingCustomerModel();
    Atomia.VM.account.resellerId('@Model.MainContact.ResellerId.ToString()');
    Atomia.VM.account.modelFields = @Html.Raw(Json.Encode(Model.MainContact.CustomFieldsInfo.CustomFieldsDict)) || {};
    Atomia.VM.norid = new Atomia.ViewModels.NoridDeclarationModel(Atomia.VM.cart, Atomia.VM.account);

    $.validator.setDefaults({
        ignore: ":hidden:not(.validateThis)"
    });

    Atomia.RESX = Atomia.RESX || {};
    Atomia.RESX.CustomFields = Atomia.RESX.CustomFields || {};

    $.extend(Atomia.RESX.CustomFields, @Html.Raw(fields) );

    Atomia.URLS = Atomia.URLS || {};
    $.extend(Atomia.URLS, {
        getApplicableCustomFields: '@Url.Action("GetApplicableCustomFields", new { controller = "Validation", area = "Validation" })'
    });

    Atomia.VM = Atomia.VM || {};
    $.extend(Atomia.VM.norid, {
        AcceptVersion: "@System.Configuration.ConfigurationManager.AppSettings["AcceptVersion"]"
    });

@if (!string.IsNullOrEmpty(dnsItem))
{
    <text>
    $(document).ready(function() {
        Atomia.VM.account.createDnsPackageItem(@Html.JsonAction("GetItem", "ProductListing", new {articleNumber = dnsItem}), Atomia.VM.cart);
        if (Atomia.VM.account.dnsPackageItem !== null) {
            Atomia.VM.cart.add(Atomia.VM.account.dnsPackageItem);
        }
    });
    </text>
    //Atomia.VM.cart.add(@Html.JsonAction("GetItem", "ProductListing", new { articleNumber = dnsItem }));
}
</script>
