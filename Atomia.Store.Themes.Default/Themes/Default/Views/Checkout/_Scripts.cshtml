@using Atomia.Web.Plugin.Validation.HtmlHelpers;

@{
    Html.EnableClientValidation();
    var checkVAT = ViewBag.CheckVAT ? "true" : "false";
    var recaptchaEnabled = ViewBag.RecaptchaEnabled != null && ViewBag.RecaptchaEnabled;
}

@if (recaptchaEnabled)
{
    <script>
        var language = Atomia.VM.languageSelector.selectedLanguage().shortName.toLowerCase();
        var scriptUrl = 'https://www.google.com/recaptcha/api.js?onload=render&hl=';

        $("body").append($("<script />", {
            src: scriptUrl + language,
            async: true,
            defer: true
        }));
    </script>
}

<script type="text/javascript">
    Atomia.VM.payment = new Atomia.ViewModels.PaymentSelectorModel(Atomia.VM.cart);
    Atomia.VM.payment.selectedPaymentMethod('@Model.SelectedPaymentMethodId');

    Atomia.VM.payWithInvoice = new Atomia.ViewModels.PayWithInvoiceModel(Atomia.VM.cart);
    Atomia.VM.payWithInvoice.loadPostalFeeItem(@Html.JsonAction("GetItem", "ProductListing", new { articleNumber = "BIL-IF" }));
    Atomia.VM.payWithInvoice.invoiceType('email');

    Atomia.VM.paymentProfile = new Atomia.ViewModels.PaymentProfileModel('@Model.SelectedPaymentMethodId', @Html.Raw(Model.PaymentMethodsWithPaymentProfileToJson()));
    Atomia.VM.campaignCode = new Atomia.ViewModels.CampaignCodeModel(Atomia.VM.cart);
    Atomia.VM.vatValidation = new Atomia.ViewModels.VatValidationModel(Atomia.VM.cart, @checkVAT);

    var termsOfServices = JSON.parse('@(new HtmlString(Json.Encode(Model.TermsOfService)))');
    Atomia.VM.termsOfService = new Atomia.ViewModels.TermsOfService(termsOfServices);

    @if (ViewBag.CheckVAT)
    {
        @: Atomia.VM.vatValidation.validateVatNumber();
    }

    @if (recaptchaEnabled)
    {
        @: Atomia.VM.recaptcha = new Atomia.ViewModels.Recaptcha('reCaptchaPlaceholder', '@ViewBag.RecaptchaSiteKey');
    }
</script>

